#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start universal-silabs-flasher
# ==============================================================================

set -e

declare autoflash_firmware
declare device
declare network_device
declare device_type
declare bootloader_baudrate
declare firmware
declare verbose
declare usb_device_path
declare usb_manufacturer
declare usb_product
declare gpio_reset_flag
declare exit_status

function cleanup() {
    exit_status=$?
    bashio::log.info "universal-silabs-flasher-up script exited with code ${exit_status}"
    echo "${exit_status}" > /run/s6-linux-init-container-results/exitcode

    /run/s6/basedir/bin/halt
}
trap cleanup EXIT

function exit_no_firmware {
    bashio::log.warning "No firmware found for the selected device, assuming firmware is installed."
    exit 0
}

network_device=$(bashio::config 'network_device')

if bashio::config.true 'device_type'; then
    device=$(bashio::config 'device')
else
    device="socket://${network_device}"
fi

bootloader_baudrate=$(bashio::config 'bootloader_baudrate')

if bashio::config.has_value 'firmware_url'; then
    curl --silent -L -o "/root/firmware.gbl" "$(bashio::config 'firmware_url')"
    if [ ! -f "/root/firmware.gbl" ]; then
        bashio::log.warning "Downloading firmware failed"
        exit 0
    fi

    firmware="firmware.gbl"
else
    exit_no_firmware
fi

verbose=""
if bashio::config.true 'verbose'; then
    verbose="-v"
fi

bashio::log.info "Starting universal-silabs-flasher with ${device} (bootloader baudrate ${bootloader_baudrate})"
universal-silabs-flasher ${verbose} --device ${device} \
     --bootloader-baudrate "${bootloader_baudrate}" \
     flash --force --firmware "/root/${firmware}"


